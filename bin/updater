#!/usr/bin/env node

var cli = require('cli').enable('status');
var extend = require('extend');
var mkdirp = require('mkdirp');
var async = require('async');
var inquirer = require('inquirer');
var exec = require('child_process').exec;
var path = require('path');
var fs = require('fs');

function getDefaultHome() {
    var ROOT_PATH;

    if (process.env.GTU_HOME)
        ROOT_PATH = process.env.GTU_HOME;
    else if (process.env.HOME && !process.env.HOMEPATH)
        ROOT_PATH = path.resolve(process.env.HOME, '.gtu');
    else if (process.env.HOME || process.env.HOMEPATH)
        ROOT_PATH = path.resolve(process.env.HOMEDRIVE, process.env.HOME || process.env.HOMEPATH, '.gtu');
    else {
        console.error('[GTU][Initialization] Environment variable HOME (Linux) or HOMEPATH (Windows) are not set!');
        console.error('[GTU][Initialization] Defaulting to /etc/.gtu');
        ROOT_PATH = path.resolve('/etc', '.gtu');
    }

    return ROOT_PATH;
}

var options = cli.parse({
    tag: ['t', 'Specific tag to checkout', 'string']
}, [
    'checkout',
    'rollout',
    'stage',
    'init'
]);



function askForTag(cb) {

    if (options.tag) {
        return cb();
    }

    exec('git ls-remote --refs --tags ' + options.repo, function (err, stdout, stderr) {
        var tags = stdout.split('\n').map(function (line) {
            return line.substr(line.lastIndexOf('/') + 1)
        }).filter(function (line) {
            return (line !== '')
        });

        inquirer.prompt(
            {
                type: 'list',
                name: 'tag',
                message: 'Which tag do you want to checkout?',
                choices: tags
            }
        ).then(function (answer) {
            options.tag = answer.tag;
            cb();
        });
    });
}

function getLocalFilenameForConfigId(id) {
    return path.join(getDefaultHome(), id + '.json');
}

function run() {

    if (cli.args.length !== 1) {
        return cli.fatal('Missing configuration argument');
    }

    var configId = cli.args[0];

    fs.readFile(getLocalFilenameForConfigId(configId), 'utf8', function (err, content) {
        if (err) {
            return cli.fatal('Configuration file missing');
        }
        var config = JSON.parse(content);

        options = extend(config, options);

        cli.info('Working directory is set to: ' + options.dir);
        cli.info('Git repository is: ' + options.repo);

        async.series([
            askForTag,
            checkIfDirectoryExists,
            cloneRepository,
            checkoutTag,
            createSymlinks,
            installDependencies,
            stage,
            rollout
        ], function () {
            process.chdir(__dirname);
        });
    });
}

function checkIfDirectoryExists(cb) {
    options.repoDir = path.join(options.dir, options.tag);
    var gitDir = path.join(options.repoDir, '.git');
    fs.stat(gitDir, function (err) {
        options.directoryExists = !(err && err.code === 'ENOENT');
        cb();
    });
}

function cloneRepository(cb) {
    cli.spinner('\tCloning repository');
    exec('git clone ' + options.repo + ' ' + path.join(options.repoDir), function (err, stdout, stderr) {
        if (err || stderr) {
            cli.spinner('\t↻ Cloning repository', true);
        } else {
            cli.spinner('\t↻ Cloning repository', true);
        }
        cb();
    });
}

function checkoutTag(cb) {
    cli.spinner('\tChecking out tag: ' + options.tag);
    exec('cd ' + options.repoDir + ' && git checkout tags/' + options.tag + ' -b ' + options.tag,
        function () {
            cli.spinner('\t↻ Checked out', true);
            cb();
        });
}

function createSymlinks(cb) {

    var symlinks = options.symlinks.split(';').map(function (entry) {
        return entry.trim();
    });

    cli.info('Creating symlinks ');

    async.each(symlinks, function (symlink, symlinkCb) {
        var parts = symlink.split('->');
        var relativePath = parts[0];
        var absolutePath = parts[1];
        var cmd = 'ln -s ' + absolutePath + ' ' + path.join(options.repoDir, relativePath);
        console.info('\t• ' + relativePath + ' -> ' + absolutePath);
        cli.debug(cmd);
        exec(cmd, symlinkCb)
    }, function () {
        cb();
    });
}

function installDependencies(cb) {
    if (options.npm_install === 'none') {
        return cb();
    }

    var cmd = 'cd ' + options.repoDir + ' && npm install';

    if (options.npm_install === 'production') {
        cmd += ' --production';
    }

    cli.spinner('Installing dependencies');
    cli.debug(cmd);
    exec(cmd, function (err, stdout, stderr) {
        //todo find a way to parse npm install stdout / stderr
        cli.spinner('Installing dependencies OK', true);
        cb();
    });
}

function stage(cb) {
    if (cli.command !== 'stage') {
        return cb();
    }
    symlinkDir('staging', cb);
}

function rollout(cb) {
    if (cli.command !== 'rollout') {
        return cb();
    }
    symlinkDir('production', cb);
}

function symlinkDir(dirname, cb) {
    var cmd = 'cd ' + options.dir + ' && rm -f ' + dirname + ' && ln -s ' + options.tag + ' ' + dirname;
    exec(cmd, function () {
        cli.info('Created symlink: ' + dirname);
        cb();
    })
}

if (cli.command === 'init') {
    init();
} else {
    run();
}

function init() {
    var questions = [{
        type: 'input',
        name: 'repo',
        message: 'Repository URL'
    }, {
        type: 'input',
        name: 'dir',
        message: 'Working directory'
    }, {
        type: 'input',
        name: 'symlinks',
        message: 'Symlinks "relative ->  absolute" separated by semicolons'
    }, {
        type: 'input',
        name: 'id',
        message: 'Configuration ID'
    }, {
        type: 'list',
        name: 'npm_intall',
        message: 'NPM install',
        choices: ['none', 'production', 'dev']
    }];

    inquirer.prompt(questions).then(function (answers) {
        var configurationFilename = getLocalFilenameForConfigId(answers.id);
        mkdirp(path.join(process.env.HOME, '.gtu'), function () {
            fs.writeFile(configurationFilename, JSON.stringify(answers, null, 2), function (err) {
                if (err) {
                    cli.fatal(err);
                }
                cli.ok('Wrote ' + configurationFilename);
            });
        })
    });
}
